# Preamble
name: Populate SaltProc release notes

on:
  release:
    type: [created, edited, published]
  push:
  #  branches:
  #    - master 
  #  paths:
  #    - 'doc/releasenotes/**'
  # enable worflow to be run manually
  workflow_dispatch:

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH

   # - name: Set up conda
   #     uses: conda-incubator/setup-miniconda@v2
   #     with:
   #       miniforge-variant: Mambaforge # mamba is faster than base conda
   #       miniforge-version: latest
   #       activate-environment: saltproc-doc-env
   #       use-mamba: true
   #       use-only-tar-bz2: true
   #   - run: |
   #       conda config --env --set pip_interop_enabled True


      - name: install pandoc 
        run: |
          conda install -c conda-forge pandoc
          pip install --upgrade pandoc

      - name: Get most recent release version
        run: echo "RELEASE_VERSION=$(gh api repos/${{ github.repository }}/releases --jq '.[0] | .tag_name')" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

       ## will need a way to clear the current release
       ## or we just run this on publish ...
       # - name: Clear current release
        #   run: gh release
        
      - name: Convert .rst to .md 
        run: pandoc -s -o RELEASENOTES.md doc/releasenotes/${{ env.RELEASE_VERSION }}.rst

          # - name: Get release data in an environment variable
          # run: echo "DESCRIPTION=$(cat RELEASENOTES.md)" >> $GITHUB_ENV

      - name: Populate the release description with RELEASENOTES.md
        uses: octokit/request-action@v2.x
        id: populate_release_description
        with:
          route: PATCH /repos/${{ github.repository }}/releases/${{ env.RELEASE_VERSION }}
          output: |
            body: test
    #    run: |
    #      curl -X PATCH \
    #      -H 'Accept: application/vnd.github.v3+json' \
    #      https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_VERSION }} \
    #      -d '{"body":"$(cat RELEASENOTES.md)"}'
    #    run: gh release create ${{ env.RELEASE_VERSION }} -t ${{ env.RELEASE_VERSION }} -dp -F RELEASENOTES.md

    #    run: |
    #      gh api repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_VERSION }} \
    #      -X PATCH -H 'Accept: application/vnd.github.v3+json' \
    #      -F body="$(cat RELEASENOTES.md)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


