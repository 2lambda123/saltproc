# Preamble
name: Create next minor release 

on:
  release:
    types: [released]
  # enable worflow to be run manually
  workflow_dispatch:

jobs:
  get-environment-variables:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Get most recent release version
        run: |
          echo "RELEASE_VERSION=$(gh api repos/${{ github.repository }}/tags --jq '.[0] | .name')" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment minor version
        run: |
          IFS='.' read -ra arr <<< ${{ env.RELEASE_VERSION }}
          MINOR_VERSION=$((${arr[1]}+1))
          arr[1]=$MINOR_VERSION
          NEW_RELEASE_VERSION="${arr[0]}.${arr[1]}.${arr[2]}"
          echo "MINOR_VERSION="$MINOR_VERSION >> $GITHUB_ENV
          echo "NEW_RELEASE_VERSION="$NEW_RELEASE_VERSION >> $GITHUB_ENV

      - name: "Check for existing ${{ env.NEW_RELEASE_VERSION }} draft release"
        run: |
          RELEASES=$(gh api repos/${{ github.repository }}/releases \
          -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -X GET \
          --jq '.[] | .name')
          if [[ $RELEASES =~ ${{ env.NEW_RELEASE_VERSION }} ]]
          then
            echo "Release exists"
          else
            gh api repos/${{ github.repository }}/releases \
            -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST \
            -F name=${{ env.NEW_RELEASE_VERSION }} \
            -F tag_name=${{ env.NEW_RELEASE_VERSION }} \
            -F draft=true 
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Check for existing ${{ env.NEW_RELEASE_VERSION }} milestone"
        run: |
          MILESTONES=$(gh api repos/${{ github.repository }}/milestones \
          -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -X GET \
          --jq '.[] | .title')
          if [[ $MILESTONES =~ ${{ env.NEW_RELEASE_VERSION }} ]]
          then
            echo "Milestone exists"
          else
            gh api repos/${{ github.repository }}/milestones \
            -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST \
            -F title=${{ env.NEW_RELEASE_VERSION }} 
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get milestone number for ${{ env.NEW_RELEASE_VERSION }}"
        run: |
          mapfile -t MILESTONE_NAMES < <(gh api repos/${{ github.repository }}/milestones \
          -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -X GET \
          --jq '.[] | .title')
          mapfile -t MILESTONE_NUMBERS < <(gh api repos/${{ github.repository }}/milestones \
          -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -X GET \
          --jq '.[] | .number')
          for i in ${!MILESTONE_NAMES[@]}
          do
            if [[ ${MILESTONE_NAMES[$i]} == ${{ env.NEW_RELEASE_VERSION }} ]]
            then
              INDEX=$i
            fi
          done
          echo "MILESTONE_NUMBER="${MILESTONE_NUMBERS[$INDEX]} >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  make-next-version-init-pr:
    needs: get-environment-variables
    uses: ./.github/workflows/next-release-init-pr.yml
    with:
      release-version: "${{ env.RELEASE_VERSION }}"
      new-release-version: "${{ env.NEW_RELEASE_VERSION }}"
      minor-version: "${{ env.MINOR_VERSION }}"
      milestone-number: ${{ env.MILESTONE_NUMBER }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  make-next-version-final-pr:
    needs: get-environment-variables
    uses: ./.github/workflows/next-release-final-pr.yml
    with:
      release-version: "${{ env.RELEASE_VERSION }}"
      new-release-version: "${{ env.NEW_RELEASE_VERSION }}"
      minor-version: "${{ env.MINOR_VERSION }}"
      milestone-number: ${{ env.MILESTONE_NUMBER }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
