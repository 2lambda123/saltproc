# Preamble
name: Create next minor release 

on:
  release:
    types: [released]
  # enable worflow to be run manually
  workflow_dispatch:

jobs:
  next-release-minor:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get most recent release version
        run: |
          echo "RELEASE_VERSION=$(gh api repos/${{ github.repository }}/tags --jq '.[0] | .name')" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment minor version
        run: |
          IFS='.' read -ra arr <<< ${{ env.RELEASE_VERSION }}
          MINOR_VERSION=$((${arr[1]}+1))
          arr[1]=$MINOR_VERSION
          NEW_RELEASE_VERSION="${arr[0]}.${arr[1]}.${arr[2]}"
          echo "MINOR_VERSION="$MINOR_VERSION >> $GITHUB_ENV
          echo "NEW_RELEASE_VERSION="$NEW_RELEASE_VERSION >> $GITHUB_ENV

      - name: Check for existing release
        run: |
          RELEASES=$(gh api repos/${{ github.repository }}/releases \
          -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -X GET \
          --jq '.[] | .name')
          if [[ $RELEASES =~ ${{ env.NEW_RELEASE_VERSION }} ]]
          then
            echo "Release exists"
          else
            gh api repos/${{ github.repository }}/releases \
            -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST \
            -F name=${{ env.NEW_RELEASE_VERSION }} \
            -F tag_name=${{ env.NEW_RELEASE_VERSION }} \
            -F draft=true 
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for existing milestone
        run: |
          MILESTONES=$(gh api repos/${{ github.repository }}/milestones \
          -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -X GET \
          --jq '.[] | .title')
          if [[ $MILESTONES =~ ${{ env.NEW_RELEASE_VERSION }} ]]
          then
            echo "Milestone exists"
          else
            gh api repos/${{ github.repository }}/milestones \
            -H "Authorize: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST \
            -F title=${{ env.NEW_RELEASE_VERSION }} 
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initial changes for the new version
        run: |
          echo "Update version.py"
          sed -i "s/_version_micro = '*[0-9]*'*/_version_micro = ''/g" saltproc/version.py
          sed -i "s/_version_minor = [0-9]*/_version_minor = ${{ env.MINOR_VERSION }}/g" saltproc/version.py
          sed -i "s/^# _version_extra = 'dev'/_version_extra = 'dev'/g" saltproc/version.py
          sed -i "s/^_version_extra = '0'/# _version_extra = '0'/g" saltproc/version.py
          echo "Create new release notes"
          cp doc/releasenotes/template.rst doc/releasenotes/${{ env.NEW_RELEASE_VERSION }}.rst
          sed -i "s/vx.x.x/${{ env.NEW_RELEASE_VERSION }}/g" doc/releasenotes/${{ env.NEW_RELEASE_VERSION }}.rst
          sed -i "s/${{ env.RELEASE_VERSION }}/${{ env.NEW_RELEASE_VERSION }}\n  ${{ env.RELEASE_VERSION }}/g" doc/releasenotes/index.rst

      - name: Create PR for inital new version changes
        uses: peter-evans/create-pull-request@v3
        with:
          branch: "${{ env.NEW_RELEASE_VERSION }}-init"
          delete-branch: true
          commit-message: "initialize files for ${{ env.NEW_RELEASE_VERSION }}"
          title: "Initialize ${{ env.NEW_RELEASE_VERISION }}"
          body: "This is an automated PR that updates the version and add release note for the new in-develpoment version of the software."
          reviewers: yardasol

      - name: Advance changes for publishing the new release
        run: |
          sed -i "s/\.\. note:: These release notes are currently in production\.//g" doc/releasenotes/${{ env.NEW_RELEASE_VERSION }}.rst
          sed -i "s/^_version_extra = 'dev'/# _version_extra = 'dev'/g" saltproc/version.py
          sed -i "s/# _version_extra = '0'/_version_extra = '0'/g" saltproc/version.py

      - name: Create advance PR final new version changes
        uses: peter-evans/create-pull-request@v3
        with:
          branch: "${{ env.NEW_RELEASE_VERSION }}-final"
          delete-branch: true
          commit-message: "update version.py and the release notes before publishing ${{ env.NEW_RELEASE_VERSION }}"
          title: "Finalize ${{ env.NEW_RELEASE_VERISION }}"
          body: "MERGE BEFORE PUBLISHING ${{ env.NEW_RELEASE_VERSION }}.\n This is an automated PR that updates version for the full release of the in-develpoment version of the software."
          reviewers: yardasol
