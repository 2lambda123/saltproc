# Preamble
name: Test SaltProc

on:
  push:
    paths:
      - 'saltproc/**'
      - 'saltproc/tests/**'
  pull_request:
  workflow_run:
    workflows: ["Cache dependencies"]
    types: [completed]
  # enable worflow to be run manually
  workflow_dispatch:

env:
  CACHE_NUMBER: 0 #change to manually reset cache

jobs:
  test-saltproc:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    env:
      MPI: no
      OMP: no
      PHDF5: no
      DAGMC: no
      EVENT: no
      VECTFIT: no
      LIBMESH: no

    steps:
      - uses: actions/checkout@v3

# Setup conda 
      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge # mamba is faster than base conda
          miniforge-version: latest
          activate-environment: saltproc-env
          use-mamba: true
          use-only-tar-bz2: true
      - run: |
          conda config --env --set pip_interop_enabled True

# check for existing cache
      - name: Set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v3
        id: dependencies-cache
        with:
          path: |
            /usr/share/miniconda3/envs/saltproc-env
            ~/openmc_src
            ~/endfb71_hdf5
            ~/.cache/pip
          key: depcache-${{ hashFiles('environment.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}

# Install dependencies
      - name: Update environment
        run: mamba env update -n saltproc-env -f environment.yml
        if: steps.dependencies-cache.outputs.cache-hit != 'true'

      - name: Install OpenMC cross section library
        if: steps.dependencies-cache.outputs.cache-hit != 'true'
        run: $GITHUB_WORKSPACE/scripts/ci/openmc-xs.bash
      
      - name: OpenMC dependencies
        run: |
          sudo apt -y update
          sudo apt install -y libhdf5-dev

      - name: Download OpenMC
        if: steps.dependencies-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with: 
          repository: openmc-dev/openmc
          path: openmc

      - name: Build OpenMC from scratch
        if: steps.dependencies-cache.outputs.cache-hit != 'true'
        run: |
          cd openmc
          python tools/ci/gha-install.py
          mkdir openmc_src
          mkdir openmc_src/bin
          mkdir openmc_src/lib
          mkdir openmc_src/share
          mkdir openmc_src/include
          cp /usr/local/bin/openmc openmc_src/bin/.
          cp -r /usr/local/lib/x86_64-linux-gnu/ openmc_src/lib/.
          cp -r /usr/local/share/openmc openmc_src/share/.
          cp -r /usr/local/share/man openmc_src/share/.
          cp -r /usr/local/include/openmc openmc_src/include/.
          cp /usr/local/include/pugiconfig.hpp openmc_src/include/.
          cp /usr/local/include/pugixml.hpp openmc_src/include/.
          cp -r /usr/local/include/fmt openmc_src/include/.
          cp -r /usr/local/include/xtl openmc_src/include/.
          cp -r /usr/local/include/xtensor openmc_src/include/.
          cp -r /usr/local/include/gsl openmc_src/include/.
          cp -r /usr/local/include/gsl-lite openmc_src/include/.
          mv openmc_src $HOME/openmc_src
          pip install .
          cd ../
          
      - name: Restore OpenMC src
        if: steps.dependencies-cache.outputs.cache-hit == 'true'
        run: |
          sudo mv $HOME/openmc_src/bin/openmc /usr/local/bin/openmc
          sudo mv $HOME/openmc_src/lib/x86_64-linux-gnu /usr/local/lib/x86_64-linux-gnu/
          sudo mv $HOME/openmc_src/share/openmc /usr/local/share/openmc
          sudo mv $HOME/openmc_src/share/man /usr/local/share/man
          sudo mv $HOME/openmc_src/include/openmc /usr/local/include/openmc
          sudo mv $HOME/openmc_src/include/pugiconfig.hpp /usr/local/include/pugiconfig.hpp
          sudo mv $HOME/openmc_src/include/pugixml.hpp /usr/local/include/pugixml.hpp
          sudo mv $HOME/openmc_src/include/fmt /usr/local/include/fmt
          sudo mv $HOME/openmc_src/include/xtl /usr/local/include/xtl
          sudo mv $HOME/openmc_src/include/xtensor /usr/local/include/xtensor
          sudo mv $HOME/openmc_src/include/gsl /usr/local/include/gsl
          sudo mv $HOME/openmc_src/include/gsl-lite /usr/local/include/gsl-lite

      - name: Install SaltProc
        run: pip install .

      - name: Try some openmc commands
        run: openmc --version
        
      - name: Test SaltProc
        run: |
          echo "OPENMC_CROSS_SECTIONS=$HOME/endfb71_hdf5/cross_sections.xml" >> $GITHUB_ENV
          pytest --ignore saltproc/tests/integration_tests saltproc
